{"code":"//import 'focus-options-polyfill'\r\nimport { addEventListener, appendChild, cloneElement, createElement, focus, getBoundingClientRect, getScaleToWindowMax, removeAttribute, removeChild, removeEventListener, setAttribute, setStyleProperty, } from '@rpearce/ts-dom-fns';\r\nvar setInnerHTML = function (el, html) {\r\n    el.innerHTML = html;\r\n};\r\nvar setInnerText = function (el, text) {\r\n    el.innerText = text;\r\n};\r\nvar insertAdjacentElement = function (targetEl, position, el) {\r\n    targetEl.insertAdjacentElement(position, el);\r\n};\r\nvar removeDataAttributes = function (el) {\r\n    for (var k in el.dataset) {\r\n        removeAttribute(\"data-\" + k, el);\r\n    }\r\n};\r\nvar getPreviousSibling = function (el) { return el.previousSibling; };\r\nvar getNextSibling = function (el) { return el.nextSibling; };\r\nvar State;\r\n(function (State) {\r\n    State[\"UNZOOMED\"] = \"UNZOOMED\";\r\n    State[\"BUSY\"] = \"BUSY\";\r\n    State[\"ZOOMED\"] = \"ZOOMED\";\r\n})(State || (State = {}));\r\nvar BUSY = State.BUSY, UNZOOMED = State.UNZOOMED, ZOOMED = State.ZOOMED;\r\nvar imageZoom = function (_a) {\r\n    var _b = _a === void 0 ? {} : _a, _c = _b.auto, auto = _c === void 0 ? true : _c, _d = _b.margin, margin = _d === void 0 ? 0 : _d, _e = _b.onChange, onChange = _e === void 0 ? undefined : _e, _f = _b.overlayBgColor, overlayBgColor = _f === void 0 ? '#fff' : _f, _g = _b.overlayOpacity, overlayOpacity = _g === void 0 ? 1 : _g, _h = _b.transitionDuration, transitionDuration = _h === void 0 ? 300 : _h, _j = _b.unzoomLabel, unzoomLabel = _j === void 0 ? 'Unzoom image' : _j, _k = _b.zIndex, zIndex = _k === void 0 ? 2147483647 : _k, _l = _b.zoomLabel, zoomLabel = _l === void 0 ? 'Zoom image' : _l, _m = _b.zoomTitle, zoomTitle = _m === void 0 ? 'Zoomed item' : _m;\r\n    var documentBody = document.body;\r\n    var win = window;\r\n    var modalBoundaryStartEl;\r\n    var modalBoundaryStopEl;\r\n    var modalContainerEl;\r\n    var modalDialogEl;\r\n    var modalDialogUnzoomBtnEl;\r\n    var modalDialogImgEl;\r\n    var modalDialogLabelEl;\r\n    var modalOverlayEl;\r\n    var state = UNZOOMED;\r\n    var trackedEls = [];\r\n    var attach = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (!args.length)\r\n            return;\r\n        var setup = function (el) {\r\n            if (el instanceof HTMLImageElement || el instanceof SVGElement) {\r\n                setStyleProp(CURSOR, 'pointer', el);\r\n                setStyleProp(CURSOR, 'zoom-in', el);\r\n                // init zoom button\r\n                var zoomBtnEl = createElement(BUTTON);\r\n                setAttribute(ARIA_LABEL, zoomLabel, zoomBtnEl);\r\n                setAttribute(DATA_RMIZ_ZOOM_BTN, '', zoomBtnEl);\r\n                setAttribute(STYLE, styleZoomBtnHidden, zoomBtnEl);\r\n                setAttribute(TYPE, BUTTON, zoomBtnEl);\r\n                setInnerHTML(zoomBtnEl, ZOOM_BTN_SVG);\r\n                // insert zoom button after img\r\n                insertAdjacentElement(el, 'afterend', zoomBtnEl);\r\n                if (auto) {\r\n                    addEventListener(CLICK, handleImgClick, el);\r\n                    addEventListener(CLICK, handleZoomBtnClick, zoomBtnEl);\r\n                    addEventListener(FOCUS, handleZoomBtnFocus, zoomBtnEl);\r\n                    addEventListener(BLUR, handleZoomBtnBlur, zoomBtnEl);\r\n                    trackedEls.push(el);\r\n                }\r\n            }\r\n        };\r\n        for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\r\n            var arg = args_1[_a];\r\n            if (arg instanceof NodeList || arg instanceof Array) {\r\n                for (var _b = 0, _c = arg; _b < _c.length; _b++) {\r\n                    var item = _c[_b];\r\n                    setup(item);\r\n                }\r\n            }\r\n            else {\r\n                setup(arg);\r\n            }\r\n        }\r\n    };\r\n    var detach = function (el, skipTracking) {\r\n        if (skipTracking === void 0) { skipTracking = false; }\r\n        if (!skipTracking) {\r\n            trackedEls = trackedEls.filter(function (x) { return x !== el; });\r\n        }\r\n        if (el) {\r\n            setStyleProp(CURSOR, '', el);\r\n        }\r\n        if (auto) {\r\n            if (el) {\r\n                removeEventListener(CLICK, handleImgClick, el);\r\n                var zoomBtnEl = getNextSibling(el);\r\n                if (zoomBtnEl instanceof HTMLButtonElement) {\r\n                    removeEventListener(FOCUS, handleZoomBtnFocus, zoomBtnEl);\r\n                    removeEventListener(BLUR, handleZoomBtnBlur, zoomBtnEl);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var reset = function () {\r\n        teardown();\r\n        setup();\r\n    };\r\n    var setup = function () {\r\n        // setup modal container\r\n        modalContainerEl = createElement(DIV);\r\n        setAttribute(DATA_RMIZ_CONTAINER, '', modalContainerEl);\r\n        setStyleProp('zIndex', \"\" + zIndex, modalContainerEl);\r\n        // setup modal overlay\r\n        modalOverlayEl = createElement(DIV);\r\n        setAttribute(DATA_RMIZ_OVERLAY, '', modalOverlayEl);\r\n        setAttribute(STYLE, 'position:fixed;top:0;right:0;bottom:0;left:0;' +\r\n            (\"background-color:\" + overlayBgColor + \";\") +\r\n            (\"transition-duration:\" + transitionDuration + \"ms;\") +\r\n            'transition-property:opacity;opacity:0;will-change:opacity;' +\r\n            styleCursorZoomOut, modalOverlayEl);\r\n        // setup modal boundary start\r\n        modalBoundaryStartEl = createElement(DIV);\r\n        setAttribute(TABINDEX, ZERO_STR, modalBoundaryStartEl);\r\n        // setup modal boundary stop\r\n        modalBoundaryStopEl = createElement(DIV);\r\n        setAttribute(TABINDEX, ZERO_STR, modalBoundaryStopEl);\r\n        // setup dialog\r\n        modalDialogEl = createElement(DIV);\r\n        setAttribute(ARIA_LABELLED_BY, ID_RMIZ_MODAL_LABEL, modalDialogEl);\r\n        setAttribute(ARIA_MODAL, 'true', modalDialogEl);\r\n        setAttribute(DATA_RMIZ_DIALOG, '', modalDialogEl);\r\n        setAttribute(ROLE, DIALOG, modalDialogEl);\r\n        setAttribute(TABINDEX, ZERO_STR, modalDialogEl);\r\n        // setup dialog close button\r\n        modalDialogUnzoomBtnEl = createElement(BUTTON);\r\n        // setup dialog label\r\n        modalDialogLabelEl = createElement(DIV);\r\n        setAttribute(STYLE, styleVisuallyHidden, modalDialogLabelEl);\r\n        setAttribute(ID, ID_RMIZ_MODAL_LABEL, modalDialogLabelEl);\r\n        setInnerText(modalDialogLabelEl, zoomTitle);\r\n        // setup placeholder dialog img\r\n        modalDialogImgEl = createElement(IMG);\r\n        // add label & close button to dialog\r\n        appendChild(modalDialogUnzoomBtnEl, modalDialogEl);\r\n        appendChild(modalDialogLabelEl, modalDialogEl);\r\n        appendChild(modalDialogImgEl, modalDialogEl);\r\n        // add items to container\r\n        appendChild(modalOverlayEl, modalContainerEl);\r\n        appendChild(modalBoundaryStartEl, modalContainerEl);\r\n        appendChild(modalDialogEl, modalContainerEl);\r\n        appendChild(modalBoundaryStopEl, modalContainerEl);\r\n    };\r\n    var teardown = function () {\r\n        // detach all automatically tracked elements\r\n        for (var _i = 0, trackedEls_1 = trackedEls; _i < trackedEls_1.length; _i++) {\r\n            var trackedEl = trackedEls_1[_i];\r\n            detach(trackedEl, true);\r\n        }\r\n        // cleanup zoom bits\r\n        teardownZoom();\r\n        // cleanup variables\r\n        modalBoundaryStartEl = undefined;\r\n        modalBoundaryStopEl = undefined;\r\n        modalContainerEl = undefined;\r\n        modalDialogUnzoomBtnEl = undefined;\r\n        modalDialogEl = undefined;\r\n        modalDialogLabelEl = undefined;\r\n        modalOverlayEl = undefined;\r\n        trackedEls = [];\r\n        // update state to unzoomed\r\n        state = UNZOOMED;\r\n    };\r\n    var teardownZoom = function () {\r\n        // cleanup window resize listener\r\n        removeEventListener(RESIZE, handleResize, win);\r\n        // cleanup modal click\r\n        if (modalContainerEl) {\r\n            removeEventListener(CLICK, handleModalClick, modalContainerEl);\r\n        }\r\n        // cleanup listener on boundary start el\r\n        if (modalBoundaryStartEl) {\r\n            removeEventListener(FOCUS, handleFocusBoundaryDiv, modalBoundaryStartEl);\r\n        }\r\n        // cleanup listener on boundary stop el\r\n        if (modalBoundaryStopEl) {\r\n            removeEventListener(FOCUS, handleFocusBoundaryDiv, modalBoundaryStopEl);\r\n        }\r\n        if (modalContainerEl) {\r\n            removeChild(modalContainerEl, documentBody);\r\n        }\r\n    };\r\n    // update the instance's options\r\n    var update = function (opts) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\r\n        if (opts === void 0) { opts = {}; }\r\n        auto = (_a = opts.auto) !== null && _a !== void 0 ? _a : auto;\r\n        margin = (_b = opts.margin) !== null && _b !== void 0 ? _b : margin;\r\n        onChange = (_c = opts.onChange) !== null && _c !== void 0 ? _c : onChange;\r\n        overlayBgColor = (_d = opts.overlayBgColor) !== null && _d !== void 0 ? _d : overlayBgColor;\r\n        overlayOpacity = (_e = opts.overlayOpacity) !== null && _e !== void 0 ? _e : overlayOpacity;\r\n        transitionDuration = (_f = opts.transitionDuration) !== null && _f !== void 0 ? _f : transitionDuration;\r\n        unzoomLabel = (_g = opts.unzoomLabel) !== null && _g !== void 0 ? _g : unzoomLabel;\r\n        zIndex = (_h = opts.zIndex) !== null && _h !== void 0 ? _h : zIndex;\r\n        zoomLabel = (_j = opts.zoomLabel) !== null && _j !== void 0 ? _j : zoomLabel;\r\n        zoomTitle = (_k = opts.zoomTitle) !== null && _k !== void 0 ? _k : zoomTitle;\r\n        if (modalContainerEl) {\r\n            setStyleProp('zIndex', \"\" + zIndex, modalContainerEl);\r\n        }\r\n        if (modalOverlayEl) {\r\n            if (isNotNil(opts.overlayBgColor)) {\r\n                setStyleProp(BG_COLOR, overlayBgColor, modalOverlayEl);\r\n            }\r\n            if (isNotNil(opts.overlayOpacity)) {\r\n                setStyleProp(OPACITY, \"\" + overlayOpacity, modalOverlayEl);\r\n            }\r\n            if (isNotNil(opts.transitionDuration)) {\r\n                setStyleProp(TRANSITION_DURATION, \"\" + transitionDuration, modalOverlayEl);\r\n            }\r\n        }\r\n        if (modalDialogLabelEl) {\r\n            modalDialogLabelEl.innerText = zoomTitle;\r\n        }\r\n        if (modalDialogUnzoomBtnEl) {\r\n            modalDialogUnzoomBtnEl.innerText = unzoomLabel;\r\n        }\r\n    };\r\n    var unzoom = function () {\r\n        console.log('unzoom');\r\n        teardownZoom();\r\n        // update state to unzoomed\r\n        state = UNZOOMED;\r\n    };\r\n    var zoom = function (el) {\r\n        if (el instanceof HTMLImageElement) {\r\n            var _a = getBoundingClientRect(el), height = _a.height, left = _a.left, top_1 = _a.top, width = _a.width;\r\n            var naturalHeight = el.naturalHeight, naturalWidth = el.naturalWidth;\r\n            var scale = getScaleToWindowMax(width, naturalWidth, height, naturalHeight, margin);\r\n            var topOffset = win.pageYOffset;\r\n            var leftOffset = win.pageXOffset;\r\n            console.log({\r\n                height: height,\r\n                left: left,\r\n                top: top_1,\r\n                width: width,\r\n                naturalWidth: naturalWidth,\r\n                naturalHeight: naturalHeight,\r\n                scale: scale,\r\n            });\r\n            // store old modal image value\r\n            var oldModalDialogImgEl = modalDialogImgEl;\r\n            // clone image and set up\r\n            modalDialogImgEl = cloneElement(false, el);\r\n            removeDataAttributes(modalDialogImgEl);\r\n            removeAttribute(ID, modalDialogImgEl);\r\n            removeAttribute(CLASS, modalDialogImgEl);\r\n            setAttribute(DATA_RMIZ_DIALOG_IMG, '', modalDialogImgEl);\r\n            setAttribute(STYLE, stylePositionAbsolute +\r\n                (\"top:\" + (topOffset + top_1) + \"px;\") +\r\n                (\"left:\" + (leftOffset + left) + \"px;\") +\r\n                (\"height:\" + height + \"px;\") +\r\n                (\"width:\" + width + \"px;\") +\r\n                \"transform:none;\" +\r\n                (\"transition:transform \" + transitionDuration + \"ms cubic-bezier(0.2,0,0.2,1);\") +\r\n                styleCursorZoomOut, modalDialogImgEl);\r\n            if (modalContainerEl && modalDialogEl && oldModalDialogImgEl) {\r\n                modalDialogEl.replaceChild(modalDialogImgEl, oldModalDialogImgEl);\r\n                appendChild(modalDialogImgEl, modalDialogEl);\r\n                appendChild(modalContainerEl, documentBody);\r\n            }\r\n            // listen for window resize\r\n            addEventListener(RESIZE, handleResize, win);\r\n            // listen for modal click\r\n            if (modalContainerEl) {\r\n                addEventListener(CLICK, handleModalClick, modalContainerEl);\r\n            }\r\n            //  listen for focus on the modal boundary start\r\n            if (modalBoundaryStartEl) {\r\n                addEventListener(FOCUS, handleFocusBoundaryDiv, modalBoundaryStartEl);\r\n            }\r\n            //  listen for focus on the modal boundary stop\r\n            if (modalBoundaryStopEl) {\r\n                addEventListener(FOCUS, handleFocusBoundaryDiv, modalBoundaryStopEl);\r\n            }\r\n        }\r\n        if (el instanceof SVGElement) {\r\n            console.log('GOT AN SVG HERE!');\r\n        }\r\n    };\r\n    var handleFocusBoundaryDiv = function () {\r\n        focusPreventScroll(modalDialogUnzoomBtnEl);\r\n    };\r\n    var handleImgClick = function (e) {\r\n        zoom(e.currentTarget);\r\n    };\r\n    var handleModalClick = function () {\r\n        console.log('MODAL CLICKED!');\r\n        unzoom();\r\n    };\r\n    var handleResize = function () {\r\n        if (state === ZOOMED) {\r\n            unzoom();\r\n        }\r\n    };\r\n    var handleZoomBtnBlur = function (e) {\r\n        setAttribute(STYLE, styleZoomBtnHidden, e.currentTarget);\r\n    };\r\n    var handleZoomBtnFocus = function (e) {\r\n        setAttribute(STYLE, styleAppearanceNone +\r\n            styleCursorZoomIn +\r\n            stylePositionAbsolute +\r\n            'padding:3px;' +\r\n            'width:30px;' +\r\n            'height:30px;' +\r\n            'background:#fff;' +\r\n            'border:none;' +\r\n            'fill:#707070;' +\r\n            'transform:translateX(-100%);', e.currentTarget);\r\n    };\r\n    var handleZoomBtnClick = function (e) {\r\n        var zoomBtnEl = e.currentTarget;\r\n        var imgEl = getPreviousSibling(zoomBtnEl);\r\n        if (imgEl instanceof HTMLImageElement) {\r\n            zoom(imgEl);\r\n        }\r\n    };\r\n    setup();\r\n    return {\r\n        attach: attach,\r\n        detach: detach,\r\n        reset: reset,\r\n        teardown: teardown,\r\n        unzoom: unzoom,\r\n        update: update,\r\n        zoom: zoom,\r\n    };\r\n};\r\n// HELPERS\r\nvar focusPreventScroll = focus.bind(null, { preventScroll: true });\r\nvar isNotNil = function (x) { return x != null; };\r\nvar setStyleProp = setStyleProperty.bind(null, undefined);\r\n//const isImgEl = targetEl.tagName === 'IMG'\r\n//const isSvgSrc = isImgEl && SVG_REGEX.test(\r\n//  (targetEl as HTMLImageElement).currentSrc\r\n//)\r\n//const isImg = !isSvgSrc && isImgEl\r\n//const documentBody = document.body\r\n//const scrollableEl = window\r\n//let ariaHiddenSiblings: [HTMLElement, string][] = []\r\n//let boundaryDivFirst: HTMLDivElement | undefined\r\n//let boundaryDivLast: HTMLDivElement | undefined\r\n//let closeBtnEl: HTMLButtonElement | undefined\r\n//let modalEl: HTMLDivElement | undefined\r\n//let motionPref: MediaQueryList | undefined\r\n//let openBtnEl: HTMLButtonElement | undefined\r\n//let overlayEl: HTMLDivElement | undefined\r\n//let state: State = UNLOADED\r\n//let transitionDuration = _transitionDuration\r\n//let zoomableEl: HTMLElement | undefined\r\n//const init = (): void => {\r\n//  addEventListener(RESIZE, handleResize, window)\r\n//  initMotionPref()\r\n//  if (isImgEl && !(targetEl as HTMLImageElement).complete) {\r\n//    addEventListener(LOAD, handleLoad, targetEl)\r\n//  } else {\r\n//    handleLoad()\r\n//  }\r\n//}\r\n//// START TARGET MUTATION OBSERVER\r\n//let bodyObserver: MutationObserver | undefined\r\n//let oldTargetEl = targetEl.cloneNode(true)\r\n//const initMutationObservers = (): void => {\r\n//  const opts = {\r\n//    attributes: true,\r\n//    characterData: true,\r\n//    childList: true,\r\n//    subtree: true,\r\n//  }\r\n//  const bodyCb = (): void => {\r\n//    if (targetEl) {\r\n//      if (state === UNLOADED && !oldTargetEl.isEqualNode(targetEl)) {\r\n//        reset()\r\n//        oldTargetEl = targetEl.cloneNode(true)\r\n//      }\r\n//    }\r\n//  }\r\n//  bodyObserver = new MutationObserver(bodyCb)\r\n//  bodyObserver.observe(documentBody, opts)\r\n//}\r\n//const cleanupMutationObservers = (): void => {\r\n//  bodyObserver?.disconnect()\r\n//  bodyObserver = undefined\r\n//}\r\n//// END TARGET MUTATION OBSERVER\r\n//// START MOTION PREFS\r\n//const initMotionPref = (): void => {\r\n//  motionPref = window.matchMedia('(prefers-reduced-motion:reduce)')\r\n//  motionPref.addListener(handleMotionPref) // NOT addEventListener because compatibility\r\n//}\r\n//const handleMotionPref = (): void => {\r\n//  transitionDuration = 0\r\n//}\r\n//const cleanupMotionPref = (): void => {\r\n//  motionPref?.removeListener(handleMotionPref) // NOT removeEventListener because compatibility\r\n//  motionPref = undefined\r\n//}\r\n//// END MOTION PREFS\r\n//const handleLoad = (): void => {\r\n//  if (!targetEl || state !== UNLOADED) return\r\n//  const { height, width } = getBoundingClientRect(targetEl)\r\n//  const { naturalHeight, naturalWidth } = targetEl as HTMLImageElement\r\n//  const currentScale = isImg && naturalHeight && naturalWidth\r\n//    ? getScaleToWindowMax(\r\n//        width,\r\n//        naturalWidth,\r\n//        height,\r\n//        naturalHeight,\r\n//        zoomMargin\r\n//      )\r\n//    : getScaleToWindow(width, height, zoomMargin)\r\n//  if (currentScale > 1) {\r\n//    // create openBtnEl\r\n//    openBtnEl = createElement(BUTTON) as HTMLButtonElement\r\n//    setAttribute(ARIA_LABEL, openText, openBtnEl)\r\n//    setAttribute(STYLE, styleZoomBtnIn, openBtnEl)\r\n//    setAttribute(TYPE, BUTTON, openBtnEl)\r\n//    adjustOpenBtnEl()\r\n//    addEventListener(CLICK, handleOpenBtnClick, openBtnEl)\r\n//    // insert openBtnEl after targetEl\r\n//    targetEl.insertAdjacentElement('afterend', openBtnEl)\r\n//  } else {\r\n//    cleanupZoom()\r\n//    cleanupDOMMutations()\r\n//  }\r\n//  initMutationObservers()\r\n//}\r\n//const reset = (): void => {\r\n//  cleanup()\r\n//  init()\r\n//}\r\n//const adjustOpenBtnEl = () => {\r\n//  if (!openBtnEl) return\r\n//  const { height, width } = getBoundingClientRect(targetEl)\r\n//  const style = getComputedStyle(targetEl)\r\n//  const type = style[DISPLAY]\r\n//  const marginLeft = parseFloat(style[MARGIN_LEFT_JS as any]) // eslint-disable-line @typescript-eslint/no-explicit-any\r\n//  const marginTop = parseFloat(style[MARGIN_TOP_JS as any]) // eslint-disable-line @typescript-eslint/no-explicit-any\r\n//  setStyleProperty(undefined, WIDTH, `${width}px`, openBtnEl)\r\n//  setStyleProperty(undefined, HEIGHT, `${height}px`, openBtnEl)\r\n//  setStyleProperty(undefined, MARGIN_LEFT_JS, `${marginLeft}px`, openBtnEl)\r\n//  if (\r\n//    type === BLOCK ||\r\n//    type === 'flex' ||\r\n//    type === 'grid' ||\r\n//    type === 'table'\r\n//  ) {\r\n//    setStyleProperty(undefined, MARGIN_TOP_JS, `-${marginTop + height}px`, openBtnEl)\r\n//  } else {\r\n//    setStyleProperty(undefined, MARGIN_LEFT_JS, `${marginLeft - width}px`, openBtnEl)\r\n//  }\r\n//}\r\n//const update: Update = (opts = {}) => {\r\n//  if (opts.closeText) closeText = opts.closeText\r\n//  if (opts.modalText) modalText = opts.modalText\r\n//  if (opts.openText) openText = opts.openText\r\n//  if (opts.overlayBgColor) overlayBgColor = opts.overlayBgColor\r\n//  if (opts.overlayOpacity) overlayOpacity = opts.overlayOpacity\r\n//  if (opts.transitionDuration) transitionDuration = opts.transitionDuration\r\n//  if (opts.zoomMargin) zoomMargin = opts.zoomMargin\r\n//  if (opts.zoomZindex) zoomZindex = opts.zoomZindex\r\n//  setZoomImgStyle(false)\r\n//  if (state === UNLOADED && opts.isZoomed) {\r\n//    zoom()\r\n//  } else if (state === LOADED && opts.isZoomed === false) {\r\n//    unzoom()\r\n//  }\r\n//}\r\n//// START CLEANUP\r\n//const cleanup = (): void => {\r\n//  cleanupZoom()\r\n//  cleanupMutationObservers()\r\n//  cleanupTargetLoad()\r\n//  cleanupDOMMutations()\r\n//  cleanupMotionPref()\r\n//  removeEventListener(RESIZE, handleResize, window)\r\n//}\r\n//const cleanupTargetLoad = (): void => {\r\n//  if (isImg && targetEl) {\r\n//    removeEventListener(LOAD, handleLoad, targetEl)\r\n//  }\r\n//}\r\n//const cleanupDOMMutations = (): void => {\r\n//  if (openBtnEl) {\r\n//    removeEventListener(CLICK, handleOpenBtnClick, openBtnEl)\r\n//    removeChild(openBtnEl, getParentNode(openBtnEl) as HTMLElement)\r\n//  }\r\n//  openBtnEl = undefined\r\n//}\r\n//const cleanupZoom = (): void => {\r\n//  removeEventListener(SCROLL, handleScroll, scrollableEl)\r\n//  removeEventListener(KEYDOWN, handleDocumentKeyDown, document)\r\n//  if (zoomableEl) {\r\n//    removeEventListener(LOAD, handleZoomImgLoad, zoomableEl)\r\n//    removeEventListener(TRANSITIONEND, handleUnzoomTransitionEnd, zoomableEl)\r\n//    removeEventListener(TRANSITIONEND, handleZoomTransitionEnd, zoomableEl)\r\n//  }\r\n//  if (closeBtnEl) {\r\n//    removeEventListener(CLICK, handleCloseBtnClick, closeBtnEl)\r\n//  }\r\n//  if (boundaryDivFirst) {\r\n//    removeEventListener(FOCUS, handleFocusBoundaryDiv, boundaryDivFirst)\r\n//  }\r\n//  if (boundaryDivLast) {\r\n//    removeEventListener(FOCUS, handleFocusBoundaryDiv, boundaryDivLast)\r\n//  }\r\n//  if (modalEl) {\r\n//    removeEventListener(CLICK, handleModalClick, modalEl)\r\n//    removeChild(modalEl, documentBody)\r\n//  }\r\n//  zoomableEl = undefined\r\n//  closeBtnEl = undefined\r\n//  boundaryDivFirst = undefined\r\n//  boundaryDivLast = undefined\r\n//  overlayEl = undefined\r\n//  modalEl = undefined\r\n//}\r\n//// END CLEANUP\r\n//const handleOpenBtnClick = (): void => {\r\n//  if (onZoomChange) {\r\n//    onZoomChange(true)\r\n//  }\r\n//  if (!isControlled) {\r\n//    zoom()\r\n//  }\r\n//}\r\n//const handleCloseBtnClick = (): void => {\r\n//  if (onZoomChange) {\r\n//    onZoomChange(false)\r\n//  }\r\n//  if (!isControlled) {\r\n//    unzoom()\r\n//  }\r\n//}\r\n//const handleFocusBoundaryDiv = (): void => {\r\n//  focusPreventScroll(closeBtnEl)\r\n//}\r\n//const handleResize = (): void => {\r\n//  if (state === LOADED) {\r\n//    setZoomImgStyle(true)\r\n//  } else {\r\n//    reset()\r\n//  }\r\n//}\r\n//const handleZoomTransitionEnd = (): void => {\r\n//  focusPreventScroll(closeBtnEl)\r\n//}\r\n//const handleZoomImgLoad = (): void => {\r\n//  if (!zoomableEl) return\r\n//  modalEl = createModal()\r\n//  if (!modalEl) return\r\n//  appendChild(modalEl, documentBody)\r\n//  addEventListener(KEYDOWN, handleDocumentKeyDown, document)\r\n//  addEventListener(SCROLL, handleScroll, scrollableEl)\r\n//  if (targetEl) {\r\n//    setStyleProperty(undefined, VISIBILITY, HIDDEN, targetEl)\r\n//  }\r\n//  if (zoomableEl) {\r\n//    addEventListener(TRANSITIONEND, handleZoomTransitionEnd, zoomableEl)\r\n//  }\r\n//  state = LOADED\r\n//  setZoomImgStyle(false)\r\n//  ariaHideOtherContent()\r\n//  if (overlayEl) {\r\n//    setAttribute(\r\n//      STYLE,\r\n//      stylePosAbsolute +\r\n//        styleAllDirsZero +\r\n//        `${BG_COLOR_CSS}:${overlayBgColor};` +\r\n//        `${TRANSITION}:${OPACITY} ${transitionDuration}ms ${styleTransitionTimingFn};` +\r\n//        `${OPACITY}:0;`,\r\n//      overlayEl\r\n//    )\r\n//    setStyleProperty(undefined, OPACITY, `${overlayOpacity}`, overlayEl)\r\n//  }\r\n//}\r\n//const handleUnzoomTransitionEnd = (): void => {\r\n//  if (targetEl) {\r\n//    setStyleProperty(undefined, VISIBILITY, '', targetEl)\r\n//  }\r\n//  state = UNLOADED\r\n//  setZoomImgStyle(true)\r\n//  cleanupZoom()\r\n//  focusPreventScroll(openBtnEl)\r\n//}\r\n//const handleModalClick = (): void => {\r\n//  if (onZoomChange) {\r\n//    onZoomChange(false)\r\n//  }\r\n//  if (!isControlled) {\r\n//    unzoom()\r\n//  }\r\n//}\r\n//const handleScroll = (): void => {\r\n//  if (state === LOADED) {\r\n//    if (onZoomChange) {\r\n//      onZoomChange(false)\r\n//    }\r\n//    if (!isControlled) {\r\n//      unzoom()\r\n//    }\r\n//  } else if (state === UNLOADING) {\r\n//    setZoomImgStyle(false)\r\n//  }\r\n//}\r\n//const handleDocumentKeyDown = (e: KeyboardEvent): void => {\r\n//  if (isEscapeKey(e)) {\r\n//    e.stopPropagation()\r\n//    if (onZoomChange) {\r\n//      onZoomChange(false)\r\n//    }\r\n//    if (!isControlled) {\r\n//      unzoom()\r\n//    }\r\n//  }\r\n//}\r\n//const setZoomImgStyle = (instant: boolean): void => {\r\n//  if (!targetEl || !zoomableEl) return\r\n//  const td = instant ? 0 : transitionDuration\r\n//  const { height, left, top, width } = targetEl.getBoundingClientRect()\r\n//  const originalTransform = getStyleProperty(TRANSFORM, targetEl)\r\n//  let transform: string\r\n//  if (state !== LOADED) {\r\n//    transform = 'scale(1) translate(0,0)' + (originalTransform ? ` ${originalTransform}` : '')\r\n//  } else {\r\n//    let scale = getScaleToWindow(width, height, zoomMargin)\r\n//    if (isImg) {\r\n//      const { naturalHeight, naturalWidth } = targetEl as HTMLImageElement\r\n//      if (naturalHeight && naturalWidth) {\r\n//        scale = getScaleToWindowMax(\r\n//          width,\r\n//          naturalWidth,\r\n//          height,\r\n//          naturalHeight,\r\n//          zoomMargin\r\n//        )\r\n//      }\r\n//    }\r\n//    // Get the the coords for center of the viewport\r\n//    const viewportX = getWindowInnerWidth() / 2\r\n//    const viewportY = getWindowInnerHeight() / 2\r\n//    // Get the coords for center of the parent item\r\n//    const childCenterX = left + width / 2\r\n//    const childCenterY = top + height / 2\r\n//    // Get offset amounts for item coords to be centered on screen\r\n//    const translateX = (viewportX - childCenterX) / scale\r\n//    const translateY = (viewportY - childCenterY) / scale\r\n//    // Build transform style, including any original transform\r\n//    transform =\r\n//      `scale(${scale}) translate(${translateX}px,${translateY}px)` +\r\n//      (originalTransform ? ` ${originalTransform}` : '')\r\n//  }\r\n//  setAttribute(\r\n//    STYLE,\r\n//    stylePosAbsolute +\r\n//      styleDisplayBlock +\r\n//      styleMaxWidth100pct +\r\n//      styleMaxHeight100pct +\r\n//      `${WIDTH}:${width}px;` +\r\n//      `${HEIGHT}:${height}px;` +\r\n//      `${LEFT}:${left}px;` +\r\n//      `${TOP}:${top}px;` +\r\n//      `${TRANSITION}:${TRANSFORM} ${td}ms ${styleTransitionTimingFn};` +\r\n//      `-webkit-${TRANSFORM}:${transform};` +\r\n//      `-ms-${TRANSFORM}:${transform};` +\r\n//      `${TRANSFORM}:${transform};`,\r\n//    zoomableEl\r\n//  )\r\n//}\r\n//const zoom = (): void => {\r\n//  if (isImgEl) {\r\n//    zoomImg()\r\n//  } else {\r\n//    zoomNonImg()\r\n//  }\r\n//  blur(openBtnEl)\r\n//}\r\n//const zoomImg = (): void => {\r\n//  if (!targetEl || state !== UNLOADED) return\r\n//  zoomableEl = cloneElement(true, targetEl) as HTMLImageElement\r\n//  removeAttribute(ID, zoomableEl)\r\n//  setAttribute(DATA_RMIZ_ZOOMED, '', zoomableEl)\r\n//  addEventListener(LOAD, handleZoomImgLoad, zoomableEl)\r\n//}\r\n//const zoomNonImg = (): void => {\r\n//  if (!targetEl || state !== UNLOADED) return\r\n//  zoomableEl = createElement(DIV) as HTMLDivElement\r\n//  setAttribute(DATA_RMIZ_ZOOMED, '', zoomableEl)\r\n//  setAttribute(STYLE, styleZoomStart, zoomableEl)\r\n//  const cloneEl = cloneElement(true, targetEl)\r\n//  removeAttribute(ID, cloneEl)\r\n//  setStyleProperty(undefined, MAX_WIDTH, NONE, cloneEl)\r\n//  setStyleProperty(undefined, MAX_HEIGHT, NONE, cloneEl)\r\n//  appendChild(cloneEl, zoomableEl)\r\n//  handleZoomImgLoad()\r\n//}\r\n//const createModal = (): HTMLDivElement | undefined => {\r\n//  if (!zoomableEl) return\r\n//  const el = createElement(DIV) as HTMLDivElement\r\n//  setAttribute(ARIA_LABEL, modalText, el)\r\n//  setAttribute(ARIA_MODAL, TRUE_STR, el)\r\n//  setAttribute(DATA_RMIZ_OVERLAY, '', el)\r\n//  setAttribute(ROLE, DIALOG, el)\r\n//  setAttribute(\r\n//    STYLE,\r\n//    `${POSITION}:fixed;` +\r\n//      styleAllDirsZero +\r\n//      styleWidth100pct +\r\n//      styleHeight100pct +\r\n//      `${Z_INDEX_CSS}:${zoomZindex};`,\r\n//    el\r\n//  )\r\n//  addEventListener(CLICK, handleModalClick, el)\r\n//  overlayEl = createElement(DIV) as HTMLDivElement\r\n//  boundaryDivFirst = createElement(DIV) as HTMLDivElement\r\n//  setAttribute(TABINDEX, ZERO, boundaryDivFirst)\r\n//  addEventListener(FOCUS, handleFocusBoundaryDiv, boundaryDivFirst)\r\n//  boundaryDivLast = createElement(DIV) as HTMLDivElement\r\n//  setAttribute(TABINDEX, ZERO, boundaryDivLast)\r\n//  addEventListener(FOCUS, handleFocusBoundaryDiv, boundaryDivLast)\r\n//  closeBtnEl = createElement(BUTTON) as HTMLButtonElement\r\n//  setAttribute(ARIA_LABEL, closeText, closeBtnEl)\r\n//  setAttribute(STYLE, styleZoomBtnOut, closeBtnEl)\r\n//  setAttribute(TYPE, BUTTON, el)\r\n//  addEventListener(CLICK, handleCloseBtnClick, closeBtnEl)\r\n//  appendChild(overlayEl, el)\r\n//  appendChild(boundaryDivFirst, el)\r\n//  appendChild(closeBtnEl, el)\r\n//  appendChild(zoomableEl, el)\r\n//  appendChild(boundaryDivLast, el)\r\n//  return el\r\n//}\r\n//const ariaHideOtherContent = (): void => {\r\n//  if (modalEl) {\r\n//    forEachSibling((el) => {\r\n//      if (isIgnoredElement(el)) return\r\n//      const ariaHiddenValue = getAttribute(ARIA_HIDDEN, el)\r\n//      if (ariaHiddenValue) {\r\n//        ariaHiddenSiblings.push([el, ariaHiddenValue])\r\n//      }\r\n//      el.setAttribute(ARIA_HIDDEN, TRUE_STR)\r\n//    }, modalEl)\r\n//  }\r\n//}\r\n//const ariaResetOtherContent = (): void => {\r\n//  if (modalEl) {\r\n//    forEachSibling((el) => {\r\n//      if (isIgnoredElement(el)) return\r\n//      removeAttribute(ARIA_HIDDEN, el)\r\n//    }, modalEl)\r\n//  }\r\n//  ariaHiddenSiblings.forEach(([el, ariaHiddenValue]) => {\r\n//    if (el) {\r\n//      setAttribute(ARIA_HIDDEN, ariaHiddenValue, el)\r\n//    }\r\n//  })\r\n//  ariaHiddenSiblings = []\r\n//}\r\n//const unzoom = (): void => {\r\n//  if (state === LOADED) {\r\n//    blur(closeBtnEl)\r\n//    ariaResetOtherContent()\r\n//    if (zoomableEl) {\r\n//      addEventListener(TRANSITIONEND, handleUnzoomTransitionEnd, zoomableEl)\r\n//    }\r\n//    state = UNLOADING\r\n//    setZoomImgStyle(false)\r\n//    if (overlayEl) {\r\n//      setStyleProperty(undefined, OPACITY, ZERO, overlayEl)\r\n//    }\r\n//  } else {\r\n//    setZoomImgStyle(false)\r\n//  }\r\n//}\r\n//init()\r\n//return { cleanup, update }\r\n//}\r\nexport default imageZoom;\r\n//\r\n// STRINGS\r\n//\r\nvar PREFIX = 'rmiz';\r\nvar DATA_PREFIX = \"data-\" + PREFIX;\r\nvar ARIA_HIDDEN = 'aria-hidden';\r\nvar ARIA_LABEL = 'aria-label';\r\nvar ARIA_LABELLED_BY = 'aria-labelledby';\r\nvar ARIA_MODAL = 'aria-modal';\r\nvar BG_COLOR = 'background-color';\r\nvar BLUR = 'blur';\r\nvar BUTTON = 'button';\r\nvar CLICK = 'click';\r\nvar CLASS = 'class';\r\nvar CURSOR = 'cursor';\r\nvar DATA_RMIZ_CONTAINER = DATA_PREFIX + \"-container\";\r\nvar DATA_RMIZ_DIALOG = DATA_PREFIX + \"-dialog\";\r\nvar DATA_RMIZ_DIALOG_IMG = DATA_PREFIX + \"-dialog-img\";\r\nvar DATA_RMIZ_OVERLAY = DATA_PREFIX + \"-overlay\";\r\nvar DATA_RMIZ_ZOOM_BTN = DATA_PREFIX + \"-zoom-button\";\r\nvar DIALOG = 'dialog';\r\nvar DIV = 'div';\r\nvar FOCUS = 'focus';\r\nvar HIDDEN = 'hidden';\r\nvar ID = 'id';\r\nvar ID_RMIZ_MODAL_LABEL = PREFIX + \"-modal-label\";\r\nvar IMG = 'img';\r\nvar KEYDOWN = 'keydown';\r\nvar LEFT = 'left';\r\nvar LOAD = 'load';\r\nvar MARGIN = 'margin';\r\nvar MARGIN_LEFT_JS = 'marginLeft';\r\nvar MARGIN_TOP_JS = 'marginTop';\r\nvar MAX_HEIGHT = 'maxHeight';\r\nvar MAX_WIDTH = 'maxWidth';\r\nvar NONE = 'none';\r\nvar OPACITY = 'opacity';\r\nvar PATH = 'path';\r\nvar POSITION = 'position';\r\nvar RESIZE = 'resize';\r\nvar ROLE = 'role';\r\nvar SCROLL = 'scroll';\r\nvar STYLE = 'style';\r\nvar SVG = 'svg';\r\nvar TABINDEX = 'tabindex';\r\nvar TOP = 'top';\r\nvar TRANSFORM = 'transform';\r\nvar TRANSITION = 'transition';\r\nvar TRANSITIONEND = 'transitionend';\r\nvar TRANSITION_DURATION = 'transition-duration';\r\nvar TYPE = 'type';\r\nvar VISIBILITY = 'visibility';\r\nvar VISIBLE = 'visible';\r\nvar WIDTH = 'width';\r\nvar ZERO_STR = '0';\r\nvar ZOOM_BTN_SVG = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 489.3 489.3\"><path d=\"M476.95 0H12.35C5.55 0 .15 5.5.15 12.2V235c0 6.8 5.5 12.2 12.2 12.2s12.3-5.5 12.3-12.2V24.5h440.2v440.2h-211.9c-6.8 0-12.3 5.5-12.3 12.3s5.5 12.3 12.3 12.3h224c6.8 0 12.3-5.5 12.3-12.3V12.3c0-6.8-5.5-12.3-12.3-12.3z\"/><path d=\"M.05 476.9c0 6.8 5.5 12.3 12.2 12.3h170.4c6.8 0 12.3-5.5 12.3-12.3V306.6c0-6.8-5.5-12.3-12.3-12.3H12.35c-6.8 0-12.2 5.5-12.2 12.3v170.3h-.1zm24.5-158.1h145.9v145.9H24.55V318.8zM222.95 266.3c2.4 2.4 5.5 3.6 8.7 3.6s6.3-1.2 8.7-3.6l138.6-138.7v79.9c0 6.8 5.5 12.3 12.3 12.3s12.3-5.5 12.3-12.3V98.1c0-6.8-5.5-12.3-12.3-12.3h-109.5c-6.8 0-12.3 5.5-12.3 12.3s5.5 12.3 12.3 12.3h79.9L222.95 249c-4.8 4.8-4.8 12.5 0 17.3z\"/></svg>';\r\n//\r\n// STYLING\r\n//\r\nvar styleAppearanceNone = '-webkit-appearance:none;-moz-appearance:none;appearance:none;';\r\nvar styleCursorPointer = 'cursor:pointer;';\r\nvar styleCursorZoomIn = styleCursorPointer + \"cursor:zoom-in;\";\r\nvar styleCursorZoomOut = styleCursorPointer + \"cursor:zoom-out;\";\r\n//const styleFastTap = 'touch-action:manipulation;'\r\nvar stylePositionAbsolute = 'position:absolute;';\r\n//const styleVisibilityHidden = 'visibility:hidden;'\r\nvar styleVisuallyHidden = stylePositionAbsolute + 'clip:rect(0 0 0 0);clip-path:inset(50%);width:1px;height:1px;overflow:hidden;white-space:nowrap;';\r\nvar styleZoomBtnHidden = styleCursorZoomIn +\r\n    stylePositionAbsolute +\r\n    styleVisuallyHidden;\r\n//const styleZoomBtnBase =\r\n//  stylePosAbsolute +\r\n//  styleFastTap +\r\n//  styleAppearanceNone +\r\n//  'background:none;` +\r\n//  'border:0;' +\r\n//  'margin:0;' +\r\n//  'padding:0;'\r\n//const styleZoomBtnIn = styleZoomBtnBase + styleCursorZoomIn\r\n//const styleZoomBtnOut =\r\n//  styleZoomBtnBase +\r\n//  styleAllDirsZero +\r\n//  styleHeight100pct +\r\n//  styleWidth100pct +\r\n//  styleCursorZoomOut +\r\n//  'z-index:1;'\r\n//const styleZoomStart = stylePosAbsolute + styleVisibilityHidden\r\n//\r\n// HELPERS\r\n//\r\nvar SVG_REGEX = /\\.svg$/i;\r\nvar isEscapeKey = function (e) { return e.key === 'Escape' || e.keyCode === 27; };\r\nvar isIgnoredElement = function (_a) {\r\n    var tagName = _a.tagName;\r\n    return tagName === 'SCRIPT' || tagName === 'NOSCRIPT' || tagName === 'STYLE';\r\n};\r\n","references":["/Users/rpearce/projects/image-zoom/node_modules/@rpearce/ts-dom-fns/dist/cjs/index.d.ts"]}
